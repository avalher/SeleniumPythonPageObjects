{"uid":"540ae8d4f2db5451","name":"test_printcarnameandprice[firefox-BMW-BMW Cars 3]","fullName":"test_carwale.Test_CarWale#test_printcarnameandprice","historyId":"8613edffe29c3133d6c27e318464ac84","time":{"start":1695155693170,"stop":1695155696484,"duration":3314},"status":"failed","statusMessage":"AssertionError: Not on the correct page as title is not matching\nassert 'BMW Cars' == 'BMW Cars 3'\n  - BMW Cars 3\n  ?         --\n  + BMW Cars","statusTrace":"self = <TestCases.test_carwale.Test_CarWale object at 0x000001FF4B5D5E10>\ncarBrand = 'BMW', carTitle = 'BMW Cars 3'\n\n    @pytest.mark.parametrize(\"carBrand, carTitle\", get_data(\"newCarsTest\"))\n    def test_printcarnameandprice(self, carBrand, carTitle):\n        log.logger.info(\"****Inside Car Names and prices******\")\n        home = HomePage(self.driver)\n        car = CarBase(self.driver)\n    \n        if carBrand == \"BMW\":\n            home.gotoNewCars().selectBMW()\n            title = car.getCarTitle()\n            print(\"Car title is: \" + title)\n>           assert title == carTitle, \"Not on the correct page as title is not matching\"\nE           AssertionError: Not on the correct page as title is not matching\nE           assert 'BMW Cars' == 'BMW Cars 3'\nE             - BMW Cars 3\nE             ?         --\nE             + BMW Cars\n\ntest_carwale.py:65: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_browser","time":{"start":1695155675177,"stop":1695155693168,"duration":17991},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"log_on_failure","time":{"start":1695155693168,"stop":1695155693168,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: Not on the correct page as title is not matching\nassert 'BMW Cars' == 'BMW Cars 3'\n  - BMW Cars 3\n  ?         --\n  + BMW Cars","statusTrace":"self = <TestCases.test_carwale.Test_CarWale object at 0x000001FF4B5D5E10>\ncarBrand = 'BMW', carTitle = 'BMW Cars 3'\n\n    @pytest.mark.parametrize(\"carBrand, carTitle\", get_data(\"newCarsTest\"))\n    def test_printcarnameandprice(self, carBrand, carTitle):\n        log.logger.info(\"****Inside Car Names and prices******\")\n        home = HomePage(self.driver)\n        car = CarBase(self.driver)\n    \n        if carBrand == \"BMW\":\n            home.gotoNewCars().selectBMW()\n            title = car.getCarTitle()\n            print(\"Car title is: \" + title)\n>           assert title == carTitle, \"Not on the correct page as title is not matching\"\nE           AssertionError: Not on the correct page as title is not matching\nE           assert 'BMW Cars' == 'BMW Cars 3'\nE             - BMW Cars 3\nE             ?         --\nE             + BMW Cars\n\ntest_carwale.py:65: AssertionError","steps":[],"attachments":[{"uid":"27e6e5c436486fb4","name":"log","source":"27e6e5c436486fb4.txt","type":"text/plain","size":314}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"log_on_failure::0","time":{"start":1695155696503,"stop":1695155696702,"duration":199},"status":"passed","steps":[],"attachments":[{"uid":"78a098ba4b74ade7","name":"dologin","source":"78a098ba4b74ade7.png","type":"image/png","size":192318}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"get_browser::0","time":{"start":1695155696705,"stop":1695155702364,"duration":5659},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('log_on_failure', 'get_browser')"},{"name":"suite","value":"test_carwale"},{"name":"subSuite","value":"Test_CarWale"},{"name":"host","value":"MXLP0854002"},{"name":"thread","value":"7848-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_carwale"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"carBrand","value":"'BMW'"},{"name":"carTitle","value":"'BMW Cars 3'"},{"name":"get_browser","value":"'firefox'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('log_on_failure', 'get_browser')"]},"source":"540ae8d4f2db5451.json","parameterValues":["'BMW'","'BMW Cars 3'","'firefox'"]}