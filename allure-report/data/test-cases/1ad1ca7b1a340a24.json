{"uid":"1ad1ca7b1a340a24","name":"test_printcarnameandprice[chrome-Honda-Honda CarsSSSS]","fullName":"test_carwale.Test_CarWale#test_printcarnameandprice","historyId":"e8a4014df1626c8e81287fa782319c82","time":{"start":1695155668937,"stop":1695155672158,"duration":3221},"status":"failed","statusMessage":"AssertionError: Not on the correct page as title is not matching\nassert 'Honda Cars' == 'Honda CarsSSSS'\n  - Honda CarsSSSS\n  ?           ----\n  + Honda Cars","statusTrace":"self = <TestCases.test_carwale.Test_CarWale object at 0x000001FF4B5D51D0>\ncarBrand = 'Honda', carTitle = 'Honda CarsSSSS'\n\n    @pytest.mark.parametrize(\"carBrand, carTitle\", get_data(\"newCarsTest\"))\n    def test_printcarnameandprice(self, carBrand, carTitle):\n        log.logger.info(\"****Inside Car Names and prices******\")\n        home = HomePage(self.driver)\n        car = CarBase(self.driver)\n    \n        if carBrand == \"BMW\":\n            home.gotoNewCars().selectBMW()\n            title = car.getCarTitle()\n            print(\"Car title is: \" + title)\n            assert title == carTitle, \"Not on the correct page as title is not matching\"\n            car.getCarNameAndPrices()\n        elif carBrand == \"Toyota\":\n            home.gotoNewCars().selectToyota()\n            title = car.getCarTitle()\n            print(\"Car title is: \" + title)\n            assert title == carTitle, \"Not on the correct page as title is not matching\"\n            car.getCarNameAndPrices()\n        elif carBrand == \"Hyundai\":\n            home.gotoNewCars().selectHyundai()\n            title = car.getCarTitle()\n            print(\"Car title is: \" + title)\n            assert title == carTitle, \"Not on the correct page as title is not matching\"\n            car.getCarNameAndPrices()\n        elif carBrand == \"Honda\":\n            home.gotoNewCars().selectHonda()\n            title = car.getCarTitle()\n            print(\"Car title is: \" + title)\n>           assert title == carTitle, \"Not on the correct page as title is not matching\"\nE           AssertionError: Not on the correct page as title is not matching\nE           assert 'Honda Cars' == 'Honda CarsSSSS'\nE             - Honda CarsSSSS\nE             ?           ----\nE             + Honda Cars\n\ntest_carwale.py:83: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_browser","time":{"start":1695155660980,"stop":1695155668934,"duration":7954},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"log_on_failure","time":{"start":1695155668935,"stop":1695155668935,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: Not on the correct page as title is not matching\nassert 'Honda Cars' == 'Honda CarsSSSS'\n  - Honda CarsSSSS\n  ?           ----\n  + Honda Cars","statusTrace":"self = <TestCases.test_carwale.Test_CarWale object at 0x000001FF4B5D51D0>\ncarBrand = 'Honda', carTitle = 'Honda CarsSSSS'\n\n    @pytest.mark.parametrize(\"carBrand, carTitle\", get_data(\"newCarsTest\"))\n    def test_printcarnameandprice(self, carBrand, carTitle):\n        log.logger.info(\"****Inside Car Names and prices******\")\n        home = HomePage(self.driver)\n        car = CarBase(self.driver)\n    \n        if carBrand == \"BMW\":\n            home.gotoNewCars().selectBMW()\n            title = car.getCarTitle()\n            print(\"Car title is: \" + title)\n            assert title == carTitle, \"Not on the correct page as title is not matching\"\n            car.getCarNameAndPrices()\n        elif carBrand == \"Toyota\":\n            home.gotoNewCars().selectToyota()\n            title = car.getCarTitle()\n            print(\"Car title is: \" + title)\n            assert title == carTitle, \"Not on the correct page as title is not matching\"\n            car.getCarNameAndPrices()\n        elif carBrand == \"Hyundai\":\n            home.gotoNewCars().selectHyundai()\n            title = car.getCarTitle()\n            print(\"Car title is: \" + title)\n            assert title == carTitle, \"Not on the correct page as title is not matching\"\n            car.getCarNameAndPrices()\n        elif carBrand == \"Honda\":\n            home.gotoNewCars().selectHonda()\n            title = car.getCarTitle()\n            print(\"Car title is: \" + title)\n>           assert title == carTitle, \"Not on the correct page as title is not matching\"\nE           AssertionError: Not on the correct page as title is not matching\nE           assert 'Honda Cars' == 'Honda CarsSSSS'\nE             - Honda CarsSSSS\nE             ?           ----\nE             + Honda Cars\n\ntest_carwale.py:83: AssertionError","steps":[],"attachments":[{"uid":"320ef26b3b307dcf","name":"log","source":"320ef26b3b307dcf.txt","type":"text/plain","size":316}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"log_on_failure::0","time":{"start":1695155672175,"stop":1695155672547,"duration":372},"status":"passed","steps":[],"attachments":[{"uid":"20d8d5dd4f92ec92","name":"dologin","source":"20d8d5dd4f92ec92.png","type":"image/png","size":140517}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"get_browser::0","time":{"start":1695155672548,"stop":1695155675164,"duration":2616},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('log_on_failure', 'get_browser')"},{"name":"suite","value":"test_carwale"},{"name":"subSuite","value":"Test_CarWale"},{"name":"host","value":"MXLP0854002"},{"name":"thread","value":"7848-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_carwale"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"carBrand","value":"'Honda'"},{"name":"carTitle","value":"'Honda CarsSSSS'"},{"name":"get_browser","value":"'chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('log_on_failure', 'get_browser')"]},"source":"1ad1ca7b1a340a24.json","parameterValues":["'Honda'","'Honda CarsSSSS'","'chrome'"]}