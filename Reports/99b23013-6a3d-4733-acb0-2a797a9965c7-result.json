{"name": "test_printcarnameandprice[chrome-Honda-Honda CarsSSSS]", "status": "failed", "statusDetails": {"message": "AssertionError: Not on the correct page as title is not matching\nassert 'Honda Cars' == 'Honda CarsSSSS'\n  - Honda CarsSSSS\n  ?           ----\n  + Honda Cars", "trace": "self = <TestCases.test_carwale.Test_CarWale object at 0x000001FF4B5D51D0>\ncarBrand = 'Honda', carTitle = 'Honda CarsSSSS'\n\n    @pytest.mark.parametrize(\"carBrand, carTitle\", get_data(\"newCarsTest\"))\n    def test_printcarnameandprice(self, carBrand, carTitle):\n        log.logger.info(\"****Inside Car Names and prices******\")\n        home = HomePage(self.driver)\n        car = CarBase(self.driver)\n    \n        if carBrand == \"BMW\":\n            home.gotoNewCars().selectBMW()\n            title = car.getCarTitle()\n            print(\"Car title is: \" + title)\n            assert title == carTitle, \"Not on the correct page as title is not matching\"\n            car.getCarNameAndPrices()\n        elif carBrand == \"Toyota\":\n            home.gotoNewCars().selectToyota()\n            title = car.getCarTitle()\n            print(\"Car title is: \" + title)\n            assert title == carTitle, \"Not on the correct page as title is not matching\"\n            car.getCarNameAndPrices()\n        elif carBrand == \"Hyundai\":\n            home.gotoNewCars().selectHyundai()\n            title = car.getCarTitle()\n            print(\"Car title is: \" + title)\n            assert title == carTitle, \"Not on the correct page as title is not matching\"\n            car.getCarNameAndPrices()\n        elif carBrand == \"Honda\":\n            home.gotoNewCars().selectHonda()\n            title = car.getCarTitle()\n            print(\"Car title is: \" + title)\n>           assert title == carTitle, \"Not on the correct page as title is not matching\"\nE           AssertionError: Not on the correct page as title is not matching\nE           assert 'Honda Cars' == 'Honda CarsSSSS'\nE             - Honda CarsSSSS\nE             ?           ----\nE             + Honda Cars\n\ntest_carwale.py:83: AssertionError"}, "attachments": [{"name": "log", "source": "7fc6c4f2-c747-4d37-ace6-0b2e0a834074-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "get_browser", "value": "'chrome'"}, {"name": "carBrand", "value": "'Honda'"}, {"name": "carTitle", "value": "'Honda CarsSSSS'"}], "start": 1695155668937, "stop": 1695155672158, "uuid": "4d2a3cc8-92a5-4a7a-9f7e-22ec0e7f6783", "historyId": "e8a4014df1626c8e81287fa782319c82", "testCaseId": "9c57a1a69df0b0dfed4b2ee279e8562c", "fullName": "test_carwale.Test_CarWale#test_printcarnameandprice", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('log_on_failure', 'get_browser')"}, {"name": "suite", "value": "test_carwale"}, {"name": "subSuite", "value": "Test_CarWale"}, {"name": "host", "value": "MXLP0854002"}, {"name": "thread", "value": "7848-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_carwale"}]}