{"name": "test_printcarnameandprice[chrome-Toyota-Toyota Cars]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=116.0.5845.188)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7A99252A2+57122]\n\t(No symbol) [0x00007FF7A989EA92]\n\t(No symbol) [0x00007FF7A976E25D]\n\t(No symbol) [0x00007FF7A97A8E97]\n\t(No symbol) [0x00007FF7A979F25F]\n\t(No symbol) [0x00007FF7A97C6FDA]\n\t(No symbol) [0x00007FF7A979EB76]\n\t(No symbol) [0x00007FF7A97C71F0]\n\t(No symbol) [0x00007FF7A97DEB82]\n\t(No symbol) [0x00007FF7A97C6DB3]\n\t(No symbol) [0x00007FF7A979D2B1]\n\t(No symbol) [0x00007FF7A979E494]\n\tGetHandleVerifier [0x00007FF7A9BCEF82+2849794]\n\tGetHandleVerifier [0x00007FF7A9C21D24+3189156]\n\tGetHandleVerifier [0x00007FF7A9C1ACAF+3160367]\n\tGetHandleVerifier [0x00007FF7A99B6D06+653702]\n\t(No symbol) [0x00007FF7A98AA208]\n\t(No symbol) [0x00007FF7A98A62C4]\n\t(No symbol) [0x00007FF7A98A63F6]\n\t(No symbol) [0x00007FF7A98967A3]\n\tBaseThreadInitThunk [0x00007FFDC5357344+20]\n\tRtlUserThreadStart [0x00007FFDC72426B1+33]", "trace": "self = <TestCases.test_carwale.Test_CarWale object at 0x000001FF4B5D55D0>\ncarBrand = 'Toyota', carTitle = 'Toyota Cars'\n\n    @pytest.mark.parametrize(\"carBrand, carTitle\", get_data(\"newCarsTest\"))\n    def test_printcarnameandprice(self, carBrand, carTitle):\n        log.logger.info(\"****Inside Car Names and prices******\")\n        home = HomePage(self.driver)\n        car = CarBase(self.driver)\n    \n        if carBrand == \"BMW\":\n            home.gotoNewCars().selectBMW()\n            title = car.getCarTitle()\n            print(\"Car title is: \" + title)\n            assert title == carTitle, \"Not on the correct page as title is not matching\"\n            car.getCarNameAndPrices()\n        elif carBrand == \"Toyota\":\n>           home.gotoNewCars().selectToyota()\n\ntest_carwale.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\newCarsPage.py:15: in selectToyota\n    self.click(\"toyota_xpath\")\n..\\Pages\\BasePage.py:18: in click\n    self.driver.find_element(By.XPATH, configReader.readConfig(\"locators\", locator)).click()\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FF4B5F3A10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF7A98967A3]\\\\n\\\\tBaseThreadInitThunk [0x00007FFDC5357344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFDC72426B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=116.0.5845.188)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7A99252A2+57122]\nE       \t(No symbol) [0x00007FF7A989EA92]\nE       \t(No symbol) [0x00007FF7A976E25D]\nE       \t(No symbol) [0x00007FF7A97A8E97]\nE       \t(No symbol) [0x00007FF7A979F25F]\nE       \t(No symbol) [0x00007FF7A97C6FDA]\nE       \t(No symbol) [0x00007FF7A979EB76]\nE       \t(No symbol) [0x00007FF7A97C71F0]\nE       \t(No symbol) [0x00007FF7A97DEB82]\nE       \t(No symbol) [0x00007FF7A97C6DB3]\nE       \t(No symbol) [0x00007FF7A979D2B1]\nE       \t(No symbol) [0x00007FF7A979E494]\nE       \tGetHandleVerifier [0x00007FF7A9BCEF82+2849794]\nE       \tGetHandleVerifier [0x00007FF7A9C21D24+3189156]\nE       \tGetHandleVerifier [0x00007FF7A9C1ACAF+3160367]\nE       \tGetHandleVerifier [0x00007FF7A99B6D06+653702]\nE       \t(No symbol) [0x00007FF7A98AA208]\nE       \t(No symbol) [0x00007FF7A98A62C4]\nE       \t(No symbol) [0x00007FF7A98A63F6]\nE       \t(No symbol) [0x00007FF7A98967A3]\nE       \tBaseThreadInitThunk [0x00007FFDC5357344+20]\nE       \tRtlUserThreadStart [0x00007FFDC72426B1+33]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": "log", "source": "a3e4122d-0d9f-4c26-af71-5a0083100272-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "get_browser", "value": "'chrome'"}, {"name": "carBrand", "value": "'Toyota'"}, {"name": "carTitle", "value": "'Toyota Cars'"}], "start": 1695155638841, "stop": 1695155652736, "uuid": "22e0d217-dbec-462d-99a1-e0a74d060dc0", "historyId": "1ea99d824004e8556357831d02e0be9c", "testCaseId": "9c57a1a69df0b0dfed4b2ee279e8562c", "fullName": "test_carwale.Test_CarWale#test_printcarnameandprice", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('log_on_failure', 'get_browser')"}, {"name": "suite", "value": "test_carwale"}, {"name": "subSuite", "value": "Test_CarWale"}, {"name": "host", "value": "MXLP0854002"}, {"name": "thread", "value": "7848-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_carwale"}]}